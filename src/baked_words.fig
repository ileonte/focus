# Ficus baked words
# These words sit a level above intrinsics, below user space

# control flow

if:
    [apply_code_if] 2 expect_then_apply

if_else:
    [apply_code_if_else] 3 expect_then_apply

apply_code_while:
    code'swap code'peek
    apply code'push
    [
        jump_target
        code'swap code'peek apply
        code'swap code'copy [jump] code'push apply_code_if
    ] code'push apply_code_if
    code'discard code'discard

while:
    [apply_code_while] 2 expect_then_apply

times:
    swap code'push(body) number? code'push(count) code'peek
    [ 0 > ] code'push
    [
        jump_target
        code'swap code'peek apply
        code'swap 1 code'push code'- code'peek
        0 > code'push [jump] code'push apply_code_if
    ]  code'push apply_code_if
    code'discard code'discard

map:
    stash'push
    temp'clear
    while [spent? not] [temp'push]
    while [temp'stack_count? temp'pop] [
        temp'pop
        stash'peek
        apply
    ]
    stash'discard

filter:
    stash'push
    temp'clear
    while [spent? not] [temp'push]
    while [temp'stack_count? temp'pop] [
        temp'pop
        copy
        if [stash'peek apply not] [pop]
    ]
    stash'discard

reduce:
    stash'push
    temp'clear
    while [spent? not] [temp'push]
    temp'pop
    while [temp'stack_count? temp'pop] [
        temp'pop
        stash'peek
        apply
    ]
    stash'discard


!=:
    = not

# stack manipulation

spent?:
    if_else [stack_count? 0 =]
            [true]
            [if_else [copy type <separator> =]
                     [discard true]
                     [false]]


# misc

?:
    copy .
